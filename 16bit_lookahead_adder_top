//Kevin Sipple
`timescale 1ns / 1ps

//module for 2-level carry look ahead adder

module carry_lookahead_16bit(Cout, S, X, Y, Cin);

    output wire Cout; // C16 for a 16 bit adder  
    output wire [15:0] S; // final sum 16 bit vector
    
    input wire [15:0] X,Y; //4 bit addends
    input wire Cin; // carry in bit
    
    wire [3:0] P_star, G_star; // block gens and props 4 bits
    wire [15:0] G,P; // intermediate wires to handle 16 bits from adders
    wire [16:0] C; //5 bit carry vector
   
   //assign the wires to proper in and out 
    assign C[0] = Cin;   
    assign Cout = C[16];    
     
//module generate_propagate_unit(G, P, X, Y ); set up

    generate_propagate_unit GPU0( G[15:0], P[15:0],  X[15:0], Y[15:0]);

//module carry_lookahead_unit( C, G, P, C0);
    //section seems to be done
    block_carry_lookahead_unit BCLAU0(
    .G_star (G_star[0]), 
    .P_star (P_star[0]),
    .C (C[3:1]),
    .G (G[3:0]), 
    .P (P[3:0]), 
    .C0 (C[0]) 
);

    block_carry_lookahead_unit BCLAU1(
    .G_star (G_star[1]), 
    .P_star (P_star[1]),
    .C (C[7:5]),
    .G (G[7:4]), 
    .P (P[7:4]), 
    .C0 (C[4]) 
);    
  
    block_carry_lookahead_unit BCLAU2(
    .G_star (G_star[2]), 
    .P_star (P_star[2]),
    .C (C[11:9]),
    .G (G[11:8]), 
    .P (P[11:8]), 
    .C0 (C[8]) 
);  

    block_carry_lookahead_unit BCLAU3(
    .G_star (G_star[3]), 
    .P_star (P_star[3]),
    .C (C[15:13]),
    .G (G[15:12]), 
    .P (P[15:12]), 
    .C0 (C[12]) 
); 

// handle the final 4 bits through a standard lookahead
    carry_lookahead_unit CLAU(
    .C ({C[16], C[12], C[8], C[4]}),
    .G (G_star),
    .P (P_star),
    .C0 (C[0])
);
     
//module summation_unit( S, P, C); set up handling 16 bits
   
    summation_unit SU0(S[15:0], P[15:0], C[15:0]);

endmodule
