// Kevin Sipple 
`timescale 1ns / 1ps
`default_nettype none

//this module will implement a add and 
// subtract unit

module add_sub( Sum, Overflow, opA, opB, opSel);

    output wire [3:0] Sum; // 4 bit result lines
    output wire Overflow;
    input wire [3:0] opA, opB;
    input wire opSel;  // if opSel = 1 subtraction occurs
    
    wire [0:3] notB;
    // define the carry wires between each adder
    wire c0, c1, c2, c3;
    
    
    // create complement for B 
    // the use of an XOR can achieve this with an operation line 
    assign notB[0] = opB[0] ^ opSel;
    assign notB[1] = opB[1] ^ opSel;
    assign notB[2] = opB[2] ^ opSel;
    assign notB[3] = opB[3] ^ opSel;
    
    //implement full adders to make a ripple carry adder with the carry wires being in and out wires
    full_adder adder0(Sum[0], c0, opA[0], notB[0], opSel);
    full_adder adder1(Sum[1], c1, opA[1], notB[1], c0);
    full_adder adder2(Sum[2], c2, opA[2], notB[2], c1);
    full_adder adder3(Sum[3], c3, opA[3], notB[3], c2);
    
    // assign logic for the overflow using XOR
    assign Overflow = c3 ^ c2;
    
endmodule
