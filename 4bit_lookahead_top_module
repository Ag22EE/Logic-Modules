//Kevin Sipple
`timescale 1ns / 1ps

module carry_lookahead_4bit(Cout, S, X, Y, Cin);

    output wire Cout; // bit C4 for a 4 bit adder
    
    output wire [3:0] S; // final sum 4 bit vector
    input wire [3:0] X,Y; //4 bit addends
    input wire Cin; // carry in bit
    
    //intermiediate wires
    wire [3:0] G,P;
    wire [4:0] C;
    
    
//module generate_propagate_unit(G, P, X, Y ) setup

//module carry_lookahead_unit( C, G, P, C0) setup
  
//module summation_unit( S, P, C) setup
    
    assign C[0] = Cin;  //assign cin as the c0 bit
    generate_propagate_unit GPU0( G[3:0], P[3:0],  X[3:0], Y[3:0]);
    
    carry_lookahead_unit CLU0(C[4:1], G[3:0], P[3:0], Cin);
    //assign the C4 bit to be the carry out bit
    assign Cout = C[4];
    
    //finally send the 4 bits through the summation unit
    summation_unit SU0(S[3:0], P[3:0], C[3:0]);

endmodule
